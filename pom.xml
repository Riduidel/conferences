<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.zenika.ndx</groupId>
	<artifactId>conferences</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<properties>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<asciidoctor.maven.plugin.version>1.5.5</asciidoctor.maven.plugin.version>
		<asciidoctorj.pdf.version>1.5.0-alpha.15</asciidoctorj.pdf.version>
		<asciidoctorj.version>1.5.5</asciidoctorj.version>
		<asciidoctorj.diagram.version>1.5.4</asciidoctorj.diagram.version>
		<jruby.version>1.7.26</jruby.version>
		<revealjs.version>3.6.0</revealjs.version>
		<asciidoctor-revealjs.version>master</asciidoctor-revealjs.version>
		<asciidoc.source.docs.directory>src/docs/asciidoc</asciidoc.source.docs.directory>
		<asciidoc.target.docs.directory>${project.build.directory}/asciidoc/docs</asciidoc.target.docs.directory>
		<asciidoc.source.slides.directory>src/slides/asciidoc</asciidoc.source.slides.directory>
		<asciidoc.target.slides.directory>${project.build.directory}/asciidoc/slides</asciidoc.target.slides.directory>
	</properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.fizzed</groupId>
					<artifactId>fizzed-watcher-maven-plugin</artifactId>
					<version>1.0.6</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.6.1</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.asciidoctor</groupId>
					<artifactId>asciidoctor-maven-plugin</artifactId>
					<version>${asciidoctor.maven.plugin.version}</version>
            		<inherited>true</inherited>
					<dependencies>
						<dependency>
							<groupId>org.asciidoctor</groupId>
							<artifactId>asciidoctorj-pdf</artifactId>
							<version>${asciidoctorj.pdf.version}</version>
						</dependency>
						<!-- Comment this section to use the default jruby artifact provided 
							by the plugin -->
						<dependency>
							<groupId>org.jruby</groupId>
							<artifactId>jruby-complete</artifactId>
							<version>${jruby.version}</version>
						</dependency>
						<!-- Comment this section to use the default AsciidoctorJ artifact 
							provided by the plugin -->
						<dependency>
							<groupId>org.asciidoctor</groupId>
							<artifactId>asciidoctorj</artifactId>
							<version>${asciidoctorj.version}</version>
						</dependency>
						<dependency>
							<groupId>org.asciidoctor</groupId>
							<artifactId>asciidoctorj-diagram</artifactId>
							<version>${asciidoctorj.diagram.version}</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>generate-docs</id>
			<activation>
				<file>
					<exists>${asciidoc.source.docs.directory}</exists>
				</file>
			</activation>
			<properties>
				<asciidoc.target.docs.directory>${project.build.directory}/asciidoc/docs</asciidoc.target.docs.directory>
			</properties>

			<build>
				<defaultGoal>process-resources</defaultGoal>
				<plugins>
					<plugin>
						<groupId>com.fizzed</groupId>
						<artifactId>fizzed-watcher-maven-plugin</artifactId>
						<configuration>
							<touchFile>target/watcher.docs.touchfile</touchFile>
							<watches>
								<watch>
									<directory>${asciidoc.source.docs.directory}</directory>
								</watch>
							</watches>
							<goals>
								<goal>clean</goal>
								<goal>process-resources</goal>
							</goals>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>${asciidoctor.maven.plugin.version}</version>
						<dependencies>
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj-pdf</artifactId>
								<version>${asciidoctorj.pdf.version}</version>
							</dependency>
							<!-- Comment this section to use the default jruby artifact provided 
								by the plugin -->
							<dependency>
								<groupId>org.jruby</groupId>
								<artifactId>jruby-complete</artifactId>
								<version>${jruby.version}</version>
							</dependency>
							<!-- Comment this section to use the default AsciidoctorJ artifact 
								provided by the plugin -->
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj</artifactId>
								<version>${asciidoctorj.version}</version>
							</dependency>
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj-diagram</artifactId>
								<version>${asciidoctorj.diagram.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<sourceDirectory>${asciidoc.source.docs.directory}</sourceDirectory>
							<preserveDirectories>true</preserveDirectories>
							<relativeBaseDir>true</relativeBaseDir>
							<requires>
								<require>asciidoctor-diagram</require>
							</requires>
							<attributes>
								<!-- Example below shows how to specify in this pom instead of System's 
									PATH, the location of dot command of Graphviz, required by PlantUML libraries -->
								<!-- Windows: <graphvizdot>C:\Program Files (x86)\Graphviz2.38\bin\dot.exe</graphvizdot> -->
								<!-- *nix : <graphvizdot>/usr/local/bin/dot</graphvizdot> -->
								<sectnums>true</sectnums>
								<revnumber>${project.version}</revnumber>
        						<revdate>${maven.build.timestamp}</revdate>
						        <organization>${project.organization.name}</organization>
							</attributes>
						</configuration>
						<executions>
							<execution>
								<id>generate-html-doc</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>html5</backend>
									<outputDirectory>${asciidoc.target.docs.directory}</outputDirectory>
									<attributes>
										<plantumldir></plantumldir>
										<imagesdir>./images</imagesdir>
										<toc>left</toc>
										<icons>font</icons>
										<sectanchors>true</sectanchors>
										<idprefix />
										<idseparator>-</idseparator>
									</attributes>
								</configuration>
							</execution>
							<!-- doesn't work in docker !!! -->
							<execution>
								<id>generate-pdf-doc</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>pdf</backend>
									<outputDirectory>${asciidoc.target.docs.directory}</outputDirectory>
									<sourceHighlighter>coderay</sourceHighlighter>
									<attributes>
										<plantumldir>${asciidoc.target.docs.directory}</plantumldir>
										<icons>font</icons>
										<pagenums />
										<toc />
										<idprefix />
										<idseparator>-</idseparator>
									</attributes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>generate-slides</id>
			<activation>
				<file>
					<exists>${asciidoc.source.slides.directory}</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.fizzed</groupId>
						<artifactId>fizzed-watcher-maven-plugin</artifactId>
						<configuration>
							<touchFile>target/watcher.slides.touchfile</touchFile>
							<watches>
								<watch>
									<directory>${asciidoc.source.slides.directory}</directory>
								</watch>
							</watches>
							<goals>
								<goal>clean</goal>
								<goal>process-resources</goal>
							</goals>
						</configuration>
					</plugin>
					<plugin>
						<groupId>com.googlecode.maven-download-plugin</groupId>
						<artifactId>download-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>install-asciidoctor-revealjs</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>wget</goal>
								</goals>
								<configuration>
									<url>https://github.com/asciidoctor/asciidoctor-reveal.js/archive/${asciidoctor-revealjs.version}.zip</url>
									<unpack>true</unpack>
									<outputFileName>asciidoctor-reveal.js-${asciidoctor-revealjs.version}.zip</outputFileName>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<id>install-revealjs</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>wget</goal>
								</goals>
								<configuration>
									<url>https://github.com/hakimel/reveal.js/archive/${revealjs.version}.zip</url>
									<unpack>true</unpack>
									<outputFileName>reveal.js-${revealjs.version}.zip</outputFileName>
									<outputDirectory>${asciidoc.target.slides.directory}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>${asciidoctor.maven.plugin.version}</version>
						<dependencies>
							<!-- Comment this section to use the default jruby artifact provided 
								by the plugin -->
							<dependency>
								<groupId>org.jruby</groupId>
								<artifactId>jruby-complete</artifactId>
								<version>${jruby.version}</version>
							</dependency>
							<!-- Comment this section to use the default AsciidoctorJ artifact 
								provided by the plugin -->
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj</artifactId>
								<version>${asciidoctorj.version}</version>
							</dependency>
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj-diagram</artifactId>
								<version>${asciidoctorj.diagram.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<sourceDirectory>${asciidoc.source.slides.directory}</sourceDirectory>
							<preserveDirectories>true</preserveDirectories>
							<relativeBaseDir>true</relativeBaseDir>
							<requires>
								<require>asciidoctor-diagram</require>
							</requires>
						</configuration>
						<executions>
							<execution>
								<id>generate-slides</id>
								<phase>process-resources</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<outputDirectory>${asciidoc.target.slides.directory}</outputDirectory>
									<backend>revealjs</backend>
									<templateDir>${project.build.directory}/asciidoctor-reveal.js-${asciidoctor-revealjs.version}/templates/slim</templateDir>
									<sourceHighlighter>coderay</sourceHighlighter>
									<attributes>
										<plantumldir>images/</plantumldir>
										<imagesdir>.</imagesdir>
										<!-- As we are downloading reveal.js in runtime, it sits in a nonstandard 
											folder `reveal.js-${revealjs.version}` -->
										<revealjsdir>reveal.js-${revealjs.version}</revealjsdir>
										<!-- put here the reveal.js specific attributes -->
										<sourcedir>${basedir}/src/main/java</sourcedir>
										<revealjs_theme>solarized</revealjs_theme>
										<project-version>${project.version}</project-version>
										<stylesheet></stylesheet>
									</attributes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<packaging>pom</packaging>
	<modules>
		<module>another_one_bites_the_rust</module>
		<module>Cyberpunk_or_Technology</module>
		<module>bootcamp-myself</module>
		<module>dtl-myself</module>
		<module>architecte-logiciel</module>
		<module>histoire-des-modes</module>
	</modules>
</project>